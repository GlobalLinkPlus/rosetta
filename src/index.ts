import fs from 'fs'
interface Base {
    namespace: string
    eng: string
}

function loadToNamespace(data: Record<string, any>, _chosen: Array<Record<string, string>> = [], namespace = "") {
    const keys = Object.keys(data ?? [])
    const nested = []
    let chosen = _chosen
    if (keys.length === 0) {
        return chosen
    }

    for (const key of keys) {
        if (data[key] && typeof data[key] === 'string') {
            chosen.push({
                namespace: `${namespace}${namespace ? ":" : ""}${key}`.toLocaleLowerCase(),
                eng: data[key]
            })
        } else {
            nested.push(key)
        }
    }

    for (const key of nested) {
        const allChosen = loadToNamespace(data[key], chosen, `${namespace}${namespace ? ":" : ""}${key}`)
        chosen = [chosen, ...(allChosen as any)]
    }

    return chosen

}

export class Translator {
    private default: Array<Base> = []

    constructor(){}

    n(namespace: string, eng: string){
        this.default.push({
            namespace,
            eng
        })
        return this
    }

    async processTranslations(target: string){
        const result: Record<string,string> = {}
        const errors: Array<any> = []
        console.log("Translating to::", this.default, target)

        await Promise.all(this.default.map(async (base) => {
            if (base == undefined) return
            try {
                console.log("Translating::", base.namespace)
                const response = await fetch(`https://backend.globallinkplus.com/api/translator/`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        source: 'en',
                        target,
                        text: base.eng
                    })
                })

                if(response.ok){
                    const data = await response.json() as {text: string}
    
                    result[base.namespace] = data.text ?? ""
                    console.log(base.namespace, "✅")

                }
                else{
                    console.log(base.namespace, "❌")
                    console.log("translation error::", response.statusText, response.status)
                }
            }
            catch (e)
            {
                console.log(base.namespace, "❌")
                console.log("translation error::", e)
            }

        }))
        // for (const base of this.default){
        // }

        const file = "./translations/" + target + ".json"

        const fileData = JSON.stringify(result)

        fs.writeFileSync(file, fileData, {
            encoding: 'utf-8'
        })


        console.log("Translation complete")
        
    }

    generateBase(){
        const result: Record<string,string> = {}
        for (const base of this.default){
            result[base.namespace] = base.eng
        }
        const file = "./translations/base.json"
        const fileData = JSON.stringify(result)
        fs.writeFileSync(file, fileData, {
            encoding: 'utf-8'
        })
        console.log("Base translation")
    }

    static loadRosettaStone(file: string){
        const data = fs.readFileSync(file, {
            encoding: 'utf-8'
        })



        const stone = JSON.parse(data)

        console.log("Stone::", stone)

        const chosen = loadToNamespace(stone, [])
        const entries = chosen.map((a) => [a.namespace, a.eng])

        const translator = new Translator()
        for (const [namespace, english] of entries){
            translator.n(namespace, (english as string) ?? "")
        }

        // console.log("Translator::", translator.default)

        return translator
    }

    static inferTypes(translator: Translator) {
        const keys = translator.default.map((base) => base.namespace)
        const TypeDef = `
        // This file is auto-generated by the generate-types.ts script 
        // Do not modify this file directly
        export type TranslationNamespaces = ${keys.map((key) => `"${key}"`).join(" | ")}
        `
        const TypeDefFile = "./translations/types.ts"
        fs.writeFileSync(TypeDefFile, TypeDef, {
            encoding: 'utf-8'
        })
    }
}